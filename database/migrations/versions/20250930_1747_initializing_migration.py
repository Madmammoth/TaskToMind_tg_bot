"""Initializing migration

Revision ID: 8ce1f96e1a6f
Revises: 
Create Date: 2025-09-30 17:47:10.118722

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '8ce1f96e1a6f'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('achievements',
    sa.Column('achievement_id', sa.Integer(), nullable=False),
    sa.Column('achievement_name', sa.String(length=100), nullable=False),
    sa.Column('parent_achievement_id', sa.Integer(), nullable=True),
    sa.Column('achievement_description', sa.Text(), nullable=False),
    sa.ForeignKeyConstraint(['parent_achievement_id'], ['achievements.achievement_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('achievement_id')
    )
    op.create_table('lists',
    sa.Column('list_id', sa.Integer(), nullable=False),
    sa.Column('parent_list_id', sa.Integer(), nullable=True),
    sa.Column('is_shared', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['parent_list_id'], ['lists.list_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('list_id')
    )
    op.create_table('recurrence_rules',
    sa.Column('rule_id', sa.Integer(), nullable=False),
    sa.Column('frequency', sa.String(length=20), nullable=True),
    sa.Column('interval', sa.Integer(), nullable=True),
    sa.Column('pattern', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('end_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('rule_id')
    )
    op.create_table('users',
    sa.Column('telegram_id', sa.BigInteger(), nullable=False),
    sa.Column('username', sa.String(length=32), nullable=True),
    sa.Column('first_name', sa.String(length=64), nullable=True),
    sa.Column('last_name', sa.String(length=64), nullable=True),
    sa.Column('gender', sa.Enum('MALE', 'FEMALE', 'OTHER', name='genderenum'), nullable=False),
    sa.Column('timezone_name', sa.String(length=50), nullable=False),
    sa.Column('timezone_offset', sa.Interval(), nullable=False),
    sa.Column('last_active', sa.DateTime(timezone=True), nullable=False),
    sa.Column('is_stopped_bot', sa.Boolean(), nullable=False),
    sa.Column('stopped_count', sa.SmallInteger(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('telegram_id')
    )
    op.create_table('list_access',
    sa.Column('list_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.BigInteger(), nullable=False),
    sa.Column('role', sa.Enum('OWNER', 'EDITOR', 'VIEWER', name='accessroleenum'), nullable=False),
    sa.Column('granted_by', sa.BigInteger(), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['granted_by'], ['users.telegram_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['list_id'], ['lists.list_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.telegram_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('list_id', 'user_id')
    )
    op.create_table('tags',
    sa.Column('tag_id', sa.Integer(), nullable=False),
    sa.Column('tag_name', sa.String(length=64), nullable=False),
    sa.Column('parent_tag_id', sa.Integer(), nullable=True),
    sa.Column('creator_id', sa.BigInteger(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['creator_id'], ['users.telegram_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['parent_tag_id'], ['tags.tag_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('tag_id'),
    sa.UniqueConstraint('tag_name', 'creator_id', name='uq_tag_name_creator')
    )
    op.create_table('tasks',
    sa.Column('task_id', sa.Integer(), nullable=False),
    sa.Column('creator_id', sa.BigInteger(), nullable=False),
    sa.Column('message_id', sa.Integer(), nullable=False),
    sa.Column('text', sa.Text(), nullable=False),
    sa.Column('priority', sa.Enum('HIGH', 'MEDIUM', 'LOW', name='levelenum'), nullable=False),
    sa.Column('urgency', sa.Enum('HIGH', 'MEDIUM', 'LOW', name='levelenum'), nullable=False),
    sa.Column('status', sa.Enum('NEW', 'IN_PROGRESS', 'DONE', 'CANCELLED', name='taskstatusenum'), nullable=False),
    sa.Column('is_shared', sa.Boolean(), nullable=False),
    sa.Column('owner_id', sa.BigInteger(), nullable=False),
    sa.Column('parent_task_id', sa.Integer(), nullable=True),
    sa.Column('deadline', sa.DateTime(timezone=True), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('done_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('cancelled_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('postponed_count', sa.Integer(), nullable=True),
    sa.Column('is_recurring', sa.Boolean(), nullable=False),
    sa.Column('recurrence_rule_id', sa.Integer(), nullable=True),
    sa.Column('duration', sa.BigInteger(), nullable=True),
    sa.Column('remind', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint('cancelled_at IS NULL OR cancelled_at >= created_at', name='chk_cancelled_after_created'),
    sa.CheckConstraint('done_at IS NULL OR done_at >= created_at', name='chk_done_after_created'),
    sa.ForeignKeyConstraint(['creator_id'], ['users.telegram_id'], ),
    sa.ForeignKeyConstraint(['owner_id'], ['users.telegram_id'], ),
    sa.ForeignKeyConstraint(['parent_task_id'], ['tasks.task_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['recurrence_rule_id'], ['recurrence_rules.rule_id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('task_id')
    )
    op.create_table('user_achievements',
    sa.Column('user_id', sa.BigInteger(), nullable=False),
    sa.Column('achievement_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['achievement_id'], ['achievements.achievement_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.telegram_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id', 'achievement_id')
    )
    op.create_table('user_lists',
    sa.Column('user_id', sa.BigInteger(), nullable=False),
    sa.Column('list_id', sa.Integer(), nullable=False),
    sa.Column('is_owner', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['list_id'], ['lists.list_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.telegram_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id', 'list_id')
    )
    op.create_table('activity_logs',
    sa.Column('log_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.BigInteger(), nullable=True),
    sa.Column('task_id', sa.Integer(), nullable=True),
    sa.Column('list_id', sa.Integer(), nullable=True),
    sa.Column('action', sa.String(length=50), nullable=False),
    sa.Column('old_value', sa.Text(), nullable=True),
    sa.Column('new_value', sa.Text(), nullable=True),
    sa.Column('extra', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['list_id'], ['lists.list_id'], ),
    sa.ForeignKeyConstraint(['task_id'], ['tasks.task_id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.telegram_id'], ),
    sa.PrimaryKeyConstraint('log_id')
    )
    op.create_table('reminders',
    sa.Column('reminder_id', sa.Integer(), nullable=False),
    sa.Column('task_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.BigInteger(), nullable=False),
    sa.Column('remind_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('recurrence_rule_id', sa.Integer(), nullable=True),
    sa.Column('status', sa.Enum('PENDING', 'SENT', 'CANCELLED', name='reminderstatusenum'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['recurrence_rule_id'], ['recurrence_rules.rule_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['task_id'], ['tasks.task_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.telegram_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('reminder_id')
    )
    op.create_table('task_access',
    sa.Column('task_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.BigInteger(), nullable=False),
    sa.Column('role', sa.Enum('OWNER', 'EDITOR', 'VIEWER', name='accessroleenum'), nullable=False),
    sa.Column('granted_by', sa.BigInteger(), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['granted_by'], ['users.telegram_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['task_id'], ['tasks.task_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.telegram_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('task_id', 'user_id')
    )
    op.create_table('task_tags',
    sa.Column('task_id', sa.Integer(), nullable=False),
    sa.Column('tag_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['tag_id'], ['tags.tag_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['task_id'], ['tasks.task_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('task_id', 'tag_id')
    )
    op.create_table('user_tags',
    sa.Column('user_id', sa.BigInteger(), nullable=False),
    sa.Column('tag_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['tag_id'], ['tags.tag_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.telegram_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id', 'tag_id')
    )
    op.create_table('user_task_lists',
    sa.Column('user_id', sa.BigInteger(), nullable=False),
    sa.Column('list_id', sa.Integer(), nullable=False),
    sa.Column('task_id', sa.Integer(), nullable=False),
    sa.Column('is_owner', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['list_id'], ['lists.list_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['task_id'], ['tasks.task_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.telegram_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id', 'list_id', 'task_id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # op.drop_table('user_task_lists')
    # op.drop_table('user_tags')
    # op.drop_table('task_tags')
    # op.drop_table('task_access')
    # op.drop_table('reminders')
    # op.drop_table('activity_logs')
    # op.drop_table('user_lists')
    # op.drop_table('user_achievements')
    # op.drop_table('tasks')
    # op.drop_table('tags')
    # op.drop_table('list_access')
    # op.drop_table('users')
    # op.drop_table('recurrence_rules')
    # op.drop_table('lists')
    # op.drop_table('achievements')
    # ### end Alembic commands ###
