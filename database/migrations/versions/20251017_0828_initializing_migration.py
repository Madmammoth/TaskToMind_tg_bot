"""Initializing migration

Revision ID: 992347daaf5c
Revises: 
Create Date: 2025-10-17 08:28:58.656007

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '992347daaf5c'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('achievements',
    sa.Column('achievement_id', sa.Integer(), nullable=False),
    sa.Column('achievement_name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('emoji', sa.String(length=10), nullable=True),
    sa.Column('category', sa.String(length=50), nullable=True),
    sa.Column('is_secret', sa.Boolean(), nullable=False),
    sa.Column('is_progression', sa.Boolean(), nullable=False),
    sa.Column('required_count', sa.Integer(), nullable=True),
    sa.Column('previous_achievement_id', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['previous_achievement_id'], ['achievements.achievement_id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('achievement_id')
    )
    op.bulk_insert(
        sa.table(
            "achievements",
            sa.Column('achievement_id', sa.Integer()),
            sa.column('achievement_name', sa.String(length=100)),
            sa.Column('description', sa.Text()),
            sa.Column('emoji', sa.String(length=10)),
            sa.Column('category', sa.String(length=50)),
            sa.Column('is_secret', sa.Boolean()),
            sa.Column('is_progression', sa.Boolean()),
            sa.Column('required_count', sa.Integer()),
            sa.Column('previous_achievement_id', sa.Integer())
        ),
        [
            {
                "achievement_id": 1,
                "achievement_name": "–ü–µ—Ä–≤—ã–π —à–∞–≥",
                "description": "–°–æ–∑–¥–∞–π –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É",
                "emoji": "ü¶∂",
                "category": "tasks_created",
                "is_secret": False,
                "is_progression": True,
                "required_count": 1,
                "previous_achievement_id": None,
            },
            {
                "achievement_id": 2,
                "achievement_name": "–ù–∞—á–∞–ª–æ –ø—É—Ç–∏",
                "description": "–°–æ–∑–¥–∞–π 5 –∑–∞–¥–∞—á",
                "emoji": "üìù",
                "category": "tasks_created",
                "is_secret": False,
                "is_progression": True,
                "required_count": 5,
                "previous_achievement_id": 1,
            },
            {
                "achievement_id": 3,
                "achievement_name": "–°–∏–ª–∞ –ø—Ä–∏–≤—ã—á–∫–∏",
                "description": "–°–æ–∑–¥–∞–π 10 –∑–∞–¥–∞—á",
                "emoji": "üí™",
                "category": "tasks_created",
                "is_secret": False,
                "is_progression": True,
                "required_count": 10,
                "previous_achievement_id": 2,
            },
            {
                "achievement_id": 4,
                "achievement_name": "–í—Å—ë –ø–æ –ø–ª–∞–Ω—É",
                "description": "–°–æ–∑–¥–∞–π 50 –∑–∞–¥–∞—á",
                "emoji": "üìÖ",
                "category": "tasks_created",
                "is_secret": False,
                "is_progression": True,
                "required_count": 50,
                "previous_achievement_id": 3,
            },
            {
                "achievement_id": 5,
                "achievement_name": "–ú–∞—Å—Ç–µ—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è",
                "description": "–°–æ–∑–¥–∞–π 100 –∑–∞–¥–∞—á",
                "emoji": "üë∑",
                "category": "tasks_created",
                "is_secret": False,
                "is_progression": True,
                "required_count": 100,
                "previous_achievement_id": 4,
            },
            {
                "achievement_id": 6,
                "achievement_name": "–ü–µ—Ä–≤—ã–π —É—Å–ø–µ—Ö",
                "description": "–ó–∞–≤–µ—Ä—à–∏ –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É",
                "emoji": "üéØ",
                "category": "tasks_completed",
                "is_secret": False,
                "is_progression": True,
                "required_count": 1,
                "previous_achievement_id": None,
            },
            {
                "achievement_id": 7,
                "achievement_name": "–ù–∞—á–∞–ª–æ –ø–æ–±–µ–¥",
                "description": "–ó–∞–≤–µ—Ä—à–∏ 5 –∑–∞–¥–∞—á",
                "emoji": "‚úÖ",
                "category": "tasks_completed",
                "is_secret": False,
                "is_progression": True,
                "required_count": 5,
                "previous_achievement_id": 6,
            },
            {
                "achievement_id": 8,
                "achievement_name": "–£—Å–µ—Ä–¥–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å",
                "description": "–ó–∞–≤–µ—Ä—à–∏ 10 –∑–∞–¥–∞—á",
                "emoji": "üìò",
                "category": "tasks_completed",
                "is_secret": False,
                "is_progression": True,
                "required_count": 10,
                "previous_achievement_id": 7,
            },
            {
                "achievement_id": 9,
                "achievement_name": "–¢–æ–ª—å–∫–æ –≤–ø–µ—Ä—ë–¥",
                "description": "–ó–∞–≤–µ—Ä—à–∏ 50 –∑–∞–¥–∞—á",
                "emoji": "üöÄ",
                "category": "tasks_completed",
                "is_secret": False,
                "is_progression": True,
                "required_count": 50,
                "previous_achievement_id": 8,
            },
            {
                "achievement_id": 10,
                "achievement_name": "–ñ–µ–ª–µ–∑–Ω–∞—è –≤–æ–ª—è",
                "description": "–ó–∞–≤–µ—Ä—à–∏ 100 –∑–∞–¥–∞—á",
                "emoji": "ü¶æ",
                "category": "tasks_completed",
                "is_secret": False,
                "is_progression": True,
                "required_count": 100,
                "previous_achievement_id": 9,
            },
            {
                "achievement_id": 11,
                "achievement_name": "–ì–∞–ª—è, —É –Ω–∞—Å –æ—Ç–º–µ–Ω–∞!",
                "description": "–û—Ç–º–µ–Ω–∏ –∑–∞–¥–∞—á—É",
                "emoji": "‚ùå",
                "category": "tasks_cancelled",
                "is_secret": False,
                "is_progression": True,
                "required_count": 1,
                "previous_achievement_id": None,
            },
            {
                "achievement_id": 12,
                "achievement_name": "–ú–∞—Å—Ç–µ—Ä –æ—Ç–≥–æ–≤–æ—Ä–æ–∫",
                "description": "¬´–Ø –ø–æ—á—Ç–∏ –∑–∞–∫–æ–Ω—á–∏–ª, –Ω–æ —Ç—É—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ...¬ª ‚Äî "
                               "–æ—Ç–º–µ–Ω–∏ 10 –∑–∞–¥–∞—á",
                "emoji": "üí¨",
                "category": "tasks_cancelled",
                "is_secret": True,
                "is_progression": True,
                "required_count": 10,
                "previous_achievement_id": None,
            },
            {
                "achievement_id": 13,
                "achievement_name": "–ê—Ä–∞–≥–æ—Ä–Ω —Ä–∞–∑—Ä–µ—à–∏–ª",
                "description": "¬´–ú–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏–¥—ë—Ç —á–∞—Å, –Ω–æ —Ç–æ–ª—å–∫–æ –Ω–µ —Å–µ–≥–æ–¥–Ω—è!¬ª ‚Äî "
                               "–æ—Ç–º–µ–Ω–∏ 50 –∑–∞–¥–∞—á",
                "emoji": "üó°Ô∏è",
                "category": "tasks_cancelled",
                "is_secret": True,
                "is_progression": True,
                "required_count": 50,
                "previous_achievement_id": None,
            },
            {
                "achievement_id": 14,
                "achievement_name": "–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä —Ö–∞–æ—Å–∞",
                "description": "–°—Ç—Ä–æ–∏—à—å –ø–ª–∞–Ω—ã, —Ç–æ–ª—å–∫–æ —á—Ç–æ–±—ã –∏—Ö –æ—Ç–º–µ–Ω—è—Ç—å ‚Äî "
                               "–æ—Ç–º–µ–Ω–∏ 100 –∑–∞–¥–∞—á",
                "emoji": "üèóÔ∏èÔ∏è",
                "category": "tasks_cancelled",
                "is_secret": True,
                "is_progression": True,
                "required_count": 100,
                "previous_achievement_id": None,
            },
            {
                "achievement_id": 15,
                "achievement_name": "–î–µ–∂–∞–≤—é",
                "description": "–°–æ–∑–¥–∞–π 1 –ø–æ–≤—Ç–æ—Ä—è—é—â—É—é—Å—è –∑–∞–¥–∞—á—É",
                "emoji": "üí´",
                "category": "recurring_tasks_created",
                "is_secret": False,
                "is_progression": True,
                "required_count": 1,
                "previous_achievement_id": None,
            },
            {
                "achievement_id": 16,
                "achievement_name": "–ü–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ",
                "description": "–°–æ–∑–¥–∞–π 10 –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –∑–∞–¥–∞—á",
                "emoji": "üìÜ",
                "category": "recurring_tasks_created",
                "is_secret": False,
                "is_progression": True,
                "required_count": 10,
                "previous_achievement_id": 15,
            },
            {
                "achievement_id": 17,
                "achievement_name": "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∂–∏–∑–Ω–∏",
                "description": "–°–æ–∑–¥–∞–π 50 –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –∑–∞–¥–∞—á",
                "emoji": "ü§ñ",
                "category": "recurring_tasks_created",
                "is_secret": False,
                "is_progression": True,
                "required_count": 50,
                "previous_achievement_id": 16,
            },
            {
                "achievement_id": 18,
                "achievement_name": "–í–∞–∂–Ω–∞—è –º–µ–ª–æ—á—å. 1 —É—Ä–æ–≤–µ–Ω—å",
                "description": "–°–æ–∑–¥–∞–π 1 –∑–∞–¥–∞—á—É —Å –Ω–∏–∑–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º",
                "emoji": "üí°üü¢",
                "category": "low_priority_tasks_created",
                "is_secret": False,
                "is_progression": True,
                "required_count": 1,
                "previous_achievement_id": None,
            },
            {
                "achievement_id": 19,
                "achievement_name": "–ú–µ–ª–æ—á—å, –∞ –ø—Ä–∏—è—Ç–Ω–æ. 1 —É—Ä–æ–≤–µ–Ω—å",
                "description": "–ó–∞–≤–µ—Ä—à–∏ 1 –∑–∞–¥–∞—á—É —Å –Ω–∏–∑–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º",
                "emoji": "‚ùóÔ∏èüü¢",
                "category": "low_priority_tasks_completed",
                "is_secret": False,
                "is_progression": True,
                "required_count": 1,
                "previous_achievement_id": None,
            },
            {
                "achievement_id": 20,
                "achievement_name": "–í–∞–∂–Ω–æ –Ω–µ –∑–∞–±—ã—Ç—å. 1 —É—Ä–æ–≤–µ–Ω—å",
                "description": "–°–æ–∑–¥–∞–π 1 –∑–∞–¥–∞—á—É —Å–æ —Å—Ä–µ–¥–Ω–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º",
                "emoji": "üí°üü°",
                "category": "medium_priority_tasks_created",
                "is_secret": False,
                "is_progression": True,
                "required_count": 1,
                "previous_achievement_id": None,
            },
            {
                "achievement_id": 21,
                "achievement_name": "–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å. 1 —É—Ä–æ–≤–µ–Ω—å",
                "description": "–ó–∞–≤–µ—Ä—à–∏ 1 –∑–∞–¥–∞—á—É —Å–æ —Å—Ä–µ–¥–Ω–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º",
                "emoji": "‚ùóÔ∏èüü°",
                "category": "medium_priority_tasks_completed",
                "is_secret": False,
                "is_progression": True,
                "required_count": 1,
                "previous_achievement_id": None,
            },
            {
                "achievement_id": 22,
                "achievement_name": "–û—Ç —Ç–µ–±—è –∑–∞–≤–∏—Å–∏—Ç –±—É–¥—É—â–µ–µ. 1 —É—Ä–æ–≤–µ–Ω—å",
                "description": "–°–æ–∑–¥–∞–π 1 –∑–∞–¥–∞—á—É —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º",
                "emoji": "üí°üî¥",
                "category": "high_priority_tasks_created",
                "is_secret": False,
                "is_progression": True,
                "required_count": 1,
                "previous_achievement_id": None,
            },
            {
                "achievement_id": 23,
                "achievement_name": "–°–ø–∞—Å–∏—Ç–µ–ª—å –¥–Ω—è. 1 —É—Ä–æ–≤–µ–Ω—å",
                "description": "–ó–∞–≤–µ—Ä—à–∏ 1 –∑–∞–¥–∞—á—É —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º",
                "emoji": "‚ùóÔ∏èüî¥",
                "category": "high_priority_tasks_completed",
                "is_secret": False,
                "is_progression": True,
                "required_count": 1,
                "previous_achievement_id": None,
            },
            {
                "achievement_id": 24,
                "achievement_name": "–°–ø–æ–∫–æ–π–Ω—ã–π –¥–µ–Ω—å. 1 —É—Ä–æ–≤–µ–Ω—å",
                "description": "–°–æ–∑–¥–∞–π 1 –∑–∞–¥–∞—á—É —Å –Ω–∏–∑–∫–æ–π —Å—Ä–æ—á–Ω–æ—Å—Ç—å—é",
                "emoji": "‚è∞üü¢",
                "category": "low_urgency_tasks_created",
                "is_secret": False,
                "is_progression": True,
                "required_count": 1,
                "previous_achievement_id": None,
            },
            {
                "achievement_id": 25,
                "achievement_name": "–°–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ. 1 —É—Ä–æ–≤–µ–Ω—å",
                "description": "–ó–∞–≤–µ—Ä—à–∏ 1 –∑–∞–¥–∞—á—É —Å –Ω–∏–∑–∫–æ–π —Å—Ä–æ—á–Ω–æ—Å—Ç—å—é",
                "emoji": "‚ö°üü¢",
                "category": "low_urgency_tasks_completed",
                "is_secret": False,
                "is_progression": True,
                "required_count": 1,
                "previous_achievement_id": None,
            },
            {
                "achievement_id": 26,
                "achievement_name": "–ü–ª–∞–Ω –Ω–∞ –∑–∞–≤—Ç—Ä–∞. 1 —É—Ä–æ–≤–µ–Ω—å",
                "description": "–°–æ–∑–¥–∞–π 1 –∑–∞–¥–∞—á—É —Å–æ —Å—Ä–µ–¥–Ω–µ–π —Å—Ä–æ—á–Ω–æ—Å—Ç—å—é",
                "emoji": "‚è∞üü°",
                "category": "medium_urgency_tasks_created",
                "is_secret": False,
                "is_progression": True,
                "required_count": 1,
                "previous_achievement_id": None,
            },
            {
                "achievement_id": 27,
                "achievement_name": "–í —Ä–∏—Ç–º–µ –¥–Ω—è. 1 —É—Ä–æ–≤–µ–Ω—å",
                "description": "–ó–∞–≤–µ—Ä—à–∏ 1 –∑–∞–¥–∞—á—É —Å–æ —Å—Ä–µ–¥–Ω–µ–π —Å—Ä–æ—á–Ω–æ—Å—Ç—å—é",
                "emoji": "‚ö°üü°",
                "category": "medium_urgency_tasks_completed",
                "is_secret": False,
                "is_progression": True,
                "required_count": 1,
                "previous_achievement_id": None,
            },
            {
                "achievement_id": 28,
                "achievement_name": "–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤. 1 —É—Ä–æ–≤–µ–Ω—å",
                "description": "–°–æ–∑–¥–∞–π 1 –∑–∞–¥–∞—á—É —Å –≤—ã—Å–æ–∫–æ–π —Å—Ä–æ—á–Ω–æ—Å—Ç—å—é",
                "emoji": "‚è∞üî¥",
                "category": "high_urgency_tasks_created",
                "is_secret": False,
                "is_progression": True,
                "required_count": 1,
                "previous_achievement_id": None,
            },
            {
                "achievement_id": 29,
                "achievement_name": "–ü–æ–¥ –¥–µ–¥–ª–∞–π–Ω–æ–º. 1 —É—Ä–æ–≤–µ–Ω—å",
                "description": "–ó–∞–≤–µ—Ä—à–∏ 1 –∑–∞–¥–∞—á—É —Å –≤—ã—Å–æ–∫–æ–π —Å—Ä–æ—á–Ω–æ—Å—Ç—å—é",
                "emoji": "‚ö°üî¥",
                "category": "high_urgency_tasks_completed",
                "is_secret": False,
                "is_progression": True,
                "required_count": 1,
                "previous_achievement_id": None,
            },
            {
                "achievement_id": 30,
                "achievement_name": "–ù–æ–≤–∞—è –ø–∞–ø–∫–∞",
                "description": "–°–æ–∑–¥–∞–π –ø–µ—Ä–≤—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á",
                "emoji": "üìÇ",
                "category": "lists_created",
                "is_secret": False,
                "is_progression": True,
                "required_count": 1,
                "previous_achievement_id": None,
            },
            {
                "achievement_id": 31,
                "achievement_name": "–ö–∞—Ç–∞–ª–æ–≥–∏–∑–∞—Ç–æ—Ä",
                "description": "–°–æ–∑–¥–∞–π 3 —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á",
                "emoji": "üóÇ",
                "category": "lists_created",
                "is_secret": False,
                "is_progression": True,
                "required_count": 3,
                "previous_achievement_id": 30,
            },
            {
                "achievement_id": 32,
                "achievement_name": "–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä",
                "description": "–°–æ–∑–¥–∞–π 5 —Å–ø–∏—Å–∫–æ–≤ –∑–∞–¥–∞—á",
                "emoji": "üìö",
                "category": "lists_created",
                "is_secret": False,
                "is_progression": True,
                "required_count": 5,
                "previous_achievement_id": 31,
            },
            {
                "achievement_id": 33,
                "achievement_name": "–ê—Ä—Ö–∏–≤–∞—Ä–∏—É—Å",
                "description": "–°–æ–∑–¥–∞–π 10 —Å–ø–∏—Å–∫–æ–≤ –∑–∞–¥–∞—á",
                "emoji": "üóÑÔ∏è",
                "category": "lists_created",
                "is_secret": False,
                "is_progression": True,
                "required_count": 10,
                "previous_achievement_id": 32,
            },
            {
                "achievement_id": 34,
                "achievement_name": "–°–ø–∏—Å–∫–æ–≤ –º–Ω–æ–≥–æ –Ω–µ –±—ã–≤–∞–µ—Ç",
                "description": "–°–æ–∑–¥–∞–π 25 —Å–ø–∏—Å–∫–æ–≤ –∑–∞–¥–∞—á",
                "emoji": "üßæ",
                "category": "lists_created",
                "is_secret": False,
                "is_progression": True,
                "required_count": 25,
                "previous_achievement_id": 33,
            },
            {
                "achievement_id": 35,
                "achievement_name": "–•—Ä–∞–Ω–∏—Ç–µ–ª—å –≤—Å–µ–ª–µ–Ω–Ω–æ–π",
                "description": "–°–æ–∑–¥–∞–π 50 —Å–ø–∏—Å–∫–æ–≤ –∑–∞–¥–∞—á",
                "emoji": "üåå",
                "category": "lists_created",
                "is_secret": False,
                "is_progression": True,
                "required_count": 50,
                "previous_achievement_id": 34,
            },
            {
                "achievement_id": 36,
                "achievement_name": "–Ø ‚Äî –Ω–µ –æ–¥–∏–Ω",
                "description": "–ü–æ–¥–µ–ª–∏—Å—å –∑–∞–¥–∞—á–µ–π",
                "emoji": "üßë‚Äçü§ù‚Äçüßë",
                "category": "tasks_shared",
                "is_secret": False,
                "is_progression": True,
                "required_count": 1,
                "previous_achievement_id": None,
            },
            {
                "achievement_id": 37,
                "achievement_name": "–ö–æ–º–∞–Ω–¥–Ω—ã–π –∏–≥—Ä–æ–∫",
                "description": "–ó–∞–≤–µ—Ä—à–∏ –æ–±—â—É—é –∑–∞–¥–∞—á—É",
                "emoji": "ü§ù",
                "category": "shared_tasks_completed",
                "is_secret": False,
                "is_progression": True,
                "required_count": 1,
                "previous_achievement_id": None,
            },
            {
                "achievement_id": 38,
                "achievement_name": "–ì–µ—Ä–æ–π –∫–æ–º–∞–Ω–¥—ã",
                "description": "–ó–∞–≤–µ—Ä—à–∏ 10 –æ–±—â–∏—Ö –∑–∞–¥–∞—á",
                "emoji": "ü¶∏",
                "category": "shared_tasks_completed",
                "is_secret": False,
                "is_progression": True,
                "required_count": 10,
                "previous_achievement_id": 37,
            },
            {
                "achievement_id": 39,
                "achievement_name": "–û–±—â–µ–µ –¥–µ–ª–æ",
                "description": "–ü–æ–¥–µ–ª–∏—Å—å —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á",
                "emoji": "üõ†Ô∏è",
                "category": "lists_shared",
                "is_secret": False,
                "is_progression": True,
                "required_count": 1,
                "previous_achievement_id": None,
            },
            {
                "achievement_id": 40,
                "achievement_name": "–¢–≤–æ—Ä–µ—Ü —Ç–µ–≥–æ–≤",
                "description": "–°–æ–∑–¥–∞–π –ø–µ—Ä–≤—ã–π —Ç–µ–≥",
                "emoji": "‚ú®",
                "category": "tags_created",
                "is_secret": False,
                "is_progression": True,
                "required_count": 1,
                "previous_achievement_id": None,
            },
            {
                "achievement_id": 41,
                "achievement_name": "–¢–µ–ø–µ—Ä—å –Ω–µ –ø–æ—Ç–µ—Ä—è–µ—à—å—Å—è",
                "description": "–î–æ–±–∞–≤—å –∫ –∑–∞–¥–∞—á–µ —Ç–µ–≥",
                "emoji": "üè∑Ô∏è",
                "category": "tasks_tagged",
                "is_secret": False,
                "is_progression": True,
                "required_count": 1,
                "previous_achievement_id": None,
            },
            {
                "achievement_id": 42,
                "achievement_name": "–¢–µ–≥–æ–º–∞–Ω",
                "description": "–°–æ–∑–¥–∞–π 10 —Ç–µ–≥–æ–≤",
                "emoji": "üóÉÔ∏èÔ∏è",
                "category": "tags_created",
                "is_secret": False,
                "is_progression": True,
                "required_count": 10,
                "previous_achievement_id": 40,
            },
            {
                "achievement_id": 43,
                "achievement_name": "–¢–µ–≥–æ–º–∞–Ω—å—è–∫",
                "description": "–î–æ–±–∞–≤—å 10 —Ç–µ–≥–æ–≤ –∫ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–µ",
                "emoji": "üîñÔ∏è",
                "category": "tags_per_task",
                "is_secret": True,
                "is_progression": True,
                "required_count": 10,
                "previous_achievement_id": None,
            },
            {
                "achievement_id": 44,
                "achievement_name": "–ü—Ä–æ—Å—Ç–æ–µ —Ä–µ—à–µ–Ω–∏–µ",
                "description": "–û—Ç–ª–æ–∂–∏ –∑–∞–¥–∞—á—É –Ω–∞ –ø–æ—Ç–æ–º",
                "emoji": "‚è∏Ô∏è",
                "category": "postpones_per_task",
                "is_secret": False,
                "is_progression": True,
                "required_count": 1,
                "previous_achievement_id": None,
            },
            {
                "achievement_id": 45,
                "achievement_name": "–ü—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ç–æ—Ä",
                "description": "–û—Ç–ª–æ–∂–∏ –∑–∞–¥–∞—á—É 5 —Ä–∞–∑",
                "emoji": "üõãÔ∏è",
                "category": "postpones_per_task",
                "is_secret": True,
                "is_progression": True,
                "required_count": 5,
                "previous_achievement_id": None,
            },
            {
                "achievement_id": 46,
                "achievement_name": "–ú–∞—Å—Ç–µ—Ä –æ—Ç–∫–ª–∞–¥—ã–≤–∞–Ω–∏—è",
                "description": "–û—Ç–ª–æ–∂–∏ –∑–∞–¥–∞—á—É 10 —Ä–∞–∑",
                "emoji": "‚è∞",
                "category": "postpones_per_task",
                "is_secret": True,
                "is_progression": True,
                "required_count": 10,
                "previous_achievement_id": None,
            },
            {
                "achievement_id": 47,
                "achievement_name": "–ü–µ—Ä–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ",
                "description": "–°–æ–∑–¥–∞–π 1 –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ",
                "emoji": "üîî",
                "category": "reminders_created",
                "is_secret": False,
                "is_progression": True,
                "required_count": 1,
                "previous_achievement_id": None,
            },
            {
                "achievement_id": 48,
                "achievement_name": "–°–ª–µ–¥–∏ –∑–∞ –≤—Ä–µ–º–µ–Ω–µ–º",
                "description": "–°–æ–∑–¥–∞–π 10 –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π",
                "emoji": "‚è±Ô∏è",
                "category": "reminders_created",
                "is_secret": False,
                "is_progression": True,
                "required_count": 10,
                "previous_achievement_id": 47,
            },
            {
                "achievement_id": 49,
                "achievement_name": "–ú–∞—ç—Å—Ç—Ä–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
                "description": "–°–æ–∑–¥–∞–π 100 –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π",
                "emoji": "üé∂",
                "category": "reminders_created",
                "is_secret": False,
                "is_progression": True,
                "required_count": 100,
                "previous_achievement_id": 48,
            },
            {
                "achievement_id": 50,
                "achievement_name": "–ü–µ—Ä–≤–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ",
                "description": "–°–æ–∑–¥–∞–π 1 –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ",
                "emoji": "üîÑ",
                "category": "recurring_reminders_created",
                "is_secret": False,
                "is_progression": True,
                "required_count": 1,
                "previous_achievement_id": None,
            },
            {
                "achievement_id": 51,
                "achievement_name": "–ï–∂–µ–¥–Ω–µ–≤–Ω–∏–∫",
                "description": "–°–æ–∑–¥–∞–π 10 –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π",
                "emoji": "üìÖ",
                "category": "recurring_reminders_created",
                "is_secret": False,
                "is_progression": True,
                "required_count": 10,
                "previous_achievement_id": 50,
            },
            {
                "achievement_id": 52,
                "achievement_name": "–†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å",
                "description": "–°–æ–∑–¥–∞–π 100 –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π",
                "emoji": "üîî",
                "category": "recurring_reminders_created",
                "is_secret": False,
                "is_progression": True,
                "required_count": 100,
                "previous_achievement_id": 51,
            },
        ],
    )
    op.create_table('lists',
    sa.Column('list_id', sa.Integer(), nullable=False),
    sa.Column('list_name', sa.String(length=64), nullable=False),
    sa.Column('parent_list_id', sa.Integer(), nullable=True),
    sa.Column('is_shared', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['parent_list_id'], ['lists.list_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('list_id')
    )
    op.create_table('recurrence_rules',
    sa.Column('rule_id', sa.Integer(), nullable=False),
    sa.Column('frequency', sa.String(length=20), nullable=True),
    sa.Column('interval', sa.Integer(), nullable=True),
    sa.Column('pattern', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('end_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('rule_id')
    )
    op.create_table('users',
    sa.Column('telegram_id', sa.BigInteger(), nullable=False),
    sa.Column('username', sa.String(length=32), nullable=True),
    sa.Column('first_name', sa.String(length=64), nullable=True),
    sa.Column('last_name', sa.String(length=64), nullable=True),
    sa.Column('gender', sa.Enum('MALE', 'FEMALE', 'OTHER', name='genderenum'), nullable=False),
    sa.Column('timezone_name', sa.String(length=50), nullable=False),
    sa.Column('timezone_offset', sa.Interval(), nullable=False),
    sa.Column('last_active', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('is_stopped_bot', sa.Boolean(), nullable=False),
    sa.Column('stopped_count', sa.SmallInteger(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('telegram_id')
    )
    op.create_table('list_access',
    sa.Column('list_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.BigInteger(), nullable=False),
    sa.Column('role', sa.Enum('OWNER', 'EDITOR', 'VIEWER', name='accessroleenum'), nullable=False),
    sa.Column('granted_by', sa.BigInteger(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['granted_by'], ['users.telegram_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['list_id'], ['lists.list_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.telegram_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('list_id', 'user_id')
    )
    op.create_table('tags',
    sa.Column('tag_id', sa.Integer(), nullable=False),
    sa.Column('tag_name', sa.String(length=64), nullable=False),
    sa.Column('parent_tag_id', sa.Integer(), nullable=True),
    sa.Column('creator_id', sa.BigInteger(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['creator_id'], ['users.telegram_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['parent_tag_id'], ['tags.tag_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('tag_id'),
    sa.UniqueConstraint('tag_name', 'creator_id', name='uq_tag_name_creator')
    )
    op.bulk_insert(
        sa.table(
            "tags",
            sa.column("tag_name", sa.String(length=64)),
        ),
        [
            {"tag_name": "–Ω–∞-—Ä–∞–±–æ—Ç–µ"},
            {"tag_name": "–¥–æ–º–∞"},
            {"tag_name": "—É—á—ë–±–∞"},
            {"tag_name": "—Ö–æ–±–±–∏"},
            {"tag_name": "–æ—Ç–ø—É—Å–∫"},
            {"tag_name": "–∑–≤–æ–Ω–æ–∫"},
            {"tag_name": "–∫—É–ø–∏—Ç—å"},
            {"tag_name": "–∏–¥–µ—è"},
            {"tag_name": "–≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ"},
            {"tag_name": "–ø–æ–¥—É–º–∞—Ç—å"},
            {"tag_name": "–∫–æ–º–ø—å—é—Ç–µ—Ä"},
            {"tag_name": "–ø–æ—Ç–æ–º"},
            {"tag_name": "–∂–¥—É"},
        ],
    )
    op.create_table('tasks',
    sa.Column('task_id', sa.Integer(), nullable=False),
    sa.Column('message_id', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(length=64), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('creator_id', sa.BigInteger(), nullable=False),
    sa.Column('priority', sa.Enum('HIGH', 'MEDIUM', 'LOW', name='levelenum'), nullable=False),
    sa.Column('urgency', sa.Enum('HIGH', 'MEDIUM', 'LOW', name='levelenum'), nullable=False),
    sa.Column('status', sa.Enum('NEW', 'IN_PROGRESS', 'DONE', 'CANCELLED', name='taskstatusenum'), nullable=False),
    sa.Column('is_shared', sa.Boolean(), nullable=False),
    sa.Column('owner_id', sa.BigInteger(), nullable=False),
    sa.Column('parent_task_id', sa.Integer(), nullable=True),
    sa.Column('deadline', sa.DateTime(timezone=True), nullable=True),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('cancelled_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('postponed_count', sa.Integer(), nullable=True),
    sa.Column('is_recurring', sa.Boolean(), nullable=False),
    sa.Column('recurrence_rule_id', sa.Integer(), nullable=True),
    sa.Column('duration', sa.BigInteger(), nullable=True),
    sa.Column('remind', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint('cancelled_at IS NULL OR cancelled_at >= created_at', name='chk_cancelled_after_created'),
    sa.CheckConstraint('completed_at IS NULL OR completed_at >= created_at', name='chk_complete_after_created'),
    sa.ForeignKeyConstraint(['creator_id'], ['users.telegram_id'], ),
    sa.ForeignKeyConstraint(['owner_id'], ['users.telegram_id'], ),
    sa.ForeignKeyConstraint(['parent_task_id'], ['tasks.task_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['recurrence_rule_id'], ['recurrence_rules.rule_id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('task_id')
    )
    op.create_table('user_achievements',
    sa.Column('user_id', sa.BigInteger(), nullable=False),
    sa.Column('achievement_id', sa.Integer(), nullable=False),
    sa.Column('unlocked_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('progress', sa.Integer(), nullable=True),
    sa.Column('is_completed', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['achievement_id'], ['achievements.achievement_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.telegram_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id', 'achievement_id'),
    sa.UniqueConstraint('user_id', 'achievement_id')
    )
    op.create_table('user_lists',
    sa.Column('user_id', sa.BigInteger(), nullable=False),
    sa.Column('list_id', sa.Integer(), nullable=False),
    sa.Column('is_owner', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['list_id'], ['lists.list_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.telegram_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id', 'list_id')
    )
    op.create_table('user_stats',
    sa.Column('user_id', sa.BigInteger(), nullable=False),
    sa.Column('tasks_created', sa.Integer(), nullable=False),
    sa.Column('tasks_completed', sa.Integer(), nullable=False),
    sa.Column('tasks_postponed', sa.Integer(), nullable=False),
    sa.Column('tasks_canceled', sa.Integer(), nullable=False),
    sa.Column('tasks_shared', sa.Integer(), nullable=False),
    sa.Column('shared_tasks_completed', sa.Integer(), nullable=False),
    sa.Column('shared_tasks_postponed', sa.Integer(), nullable=False),
    sa.Column('shared_tasks_canceled', sa.Integer(), nullable=False),
    sa.Column('recurring_tasks_created', sa.Integer(), nullable=False),
    sa.Column('recurring_tasks_deleted', sa.Integer(), nullable=False),
    sa.Column('low_priority_tasks_created', sa.Integer(), nullable=False),
    sa.Column('medium_priority_tasks_created', sa.Integer(), nullable=False),
    sa.Column('high_priority_tasks_created', sa.Integer(), nullable=False),
    sa.Column('low_urgency_tasks_created', sa.Integer(), nullable=False),
    sa.Column('medium_urgency_tasks_created', sa.Integer(), nullable=False),
    sa.Column('high_urgency_tasks_created', sa.Integer(), nullable=False),
    sa.Column('low_priority_tasks_completed', sa.Integer(), nullable=False),
    sa.Column('medium_priority_tasks_completed', sa.Integer(), nullable=False),
    sa.Column('high_priority_tasks_completed', sa.Integer(), nullable=False),
    sa.Column('low_urgency_tasks_completed', sa.Integer(), nullable=False),
    sa.Column('medium_urgency_tasks_completed', sa.Integer(), nullable=False),
    sa.Column('high_urgency_tasks_completed', sa.Integer(), nullable=False),
    sa.Column('postpones_per_task', sa.Integer(), nullable=False),
    sa.Column('tasks_completed_before_deadline', sa.Integer(), nullable=False),
    sa.Column('tasks_completed_after_deadline', sa.Integer(), nullable=False),
    sa.Column('checked_tasks_created', sa.Integer(), nullable=False),
    sa.Column('checked_tasks_completed', sa.Integer(), nullable=False),
    sa.Column('checked_tasks_canceled', sa.Integer(), nullable=False),
    sa.Column('lists_created', sa.Integer(), nullable=False),
    sa.Column('lists_deleted', sa.Integer(), nullable=False),
    sa.Column('lists_shared', sa.Integer(), nullable=False),
    sa.Column('tags_created', sa.Integer(), nullable=False),
    sa.Column('tags_deleted', sa.Integer(), nullable=False),
    sa.Column('tasks_tagged', sa.Integer(), nullable=False),
    sa.Column('tags_assigned', sa.Integer(), nullable=False),
    sa.Column('tags_per_task', sa.Integer(), nullable=False),
    sa.Column('reminders_created', sa.Integer(), nullable=False),
    sa.Column('reminders_deleted', sa.Integer(), nullable=False),
    sa.Column('recurring_reminders_created', sa.Integer(), nullable=False),
    sa.Column('recurring_reminders_deleted', sa.Integer(), nullable=False),
    sa.Column('recurrence_rules_created', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.telegram_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id')
    )
    op.create_table('activity_logs',
    sa.Column('log_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.BigInteger(), nullable=True),
    sa.Column('task_id', sa.Integer(), nullable=True),
    sa.Column('list_id', sa.Integer(), nullable=True),
    sa.Column('action', sa.String(length=50), nullable=False),
    sa.Column('old_value', sa.Text(), nullable=True),
    sa.Column('new_value', sa.Text(), nullable=True),
    sa.Column('extra', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('success', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['list_id'], ['lists.list_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['task_id'], ['tasks.task_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.telegram_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('log_id')
    )
    op.create_table('reminders',
    sa.Column('reminder_id', sa.Integer(), nullable=False),
    sa.Column('task_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.BigInteger(), nullable=False),
    sa.Column('remind_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('recurrence_rule_id', sa.Integer(), nullable=True),
    sa.Column('status', sa.Enum('PENDING', 'SENT', 'CANCELLED', name='reminderstatusenum'), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['recurrence_rule_id'], ['recurrence_rules.rule_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['task_id'], ['tasks.task_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.telegram_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('reminder_id')
    )
    op.create_table('task_access',
    sa.Column('task_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.BigInteger(), nullable=False),
    sa.Column('role', sa.Enum('OWNER', 'EDITOR', 'VIEWER', name='accessroleenum'), nullable=False),
    sa.Column('granted_by', sa.BigInteger(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['granted_by'], ['users.telegram_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['task_id'], ['tasks.task_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.telegram_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('task_id', 'user_id')
    )
    op.create_table('task_tags',
    sa.Column('task_id', sa.Integer(), nullable=False),
    sa.Column('tag_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['tag_id'], ['tags.tag_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['task_id'], ['tasks.task_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('task_id', 'tag_id')
    )
    op.create_table('user_tags',
    sa.Column('user_id', sa.BigInteger(), nullable=False),
    sa.Column('tag_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['tag_id'], ['tags.tag_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.telegram_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id', 'tag_id')
    )
    op.create_table('user_task_lists',
    sa.Column('user_id', sa.BigInteger(), nullable=False),
    sa.Column('list_id', sa.Integer(), nullable=False),
    sa.Column('task_id', sa.Integer(), nullable=False),
    sa.Column('is_owner', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['list_id'], ['lists.list_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['task_id'], ['tasks.task_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.telegram_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id', 'list_id', 'task_id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('user_task_lists')
    op.drop_table('user_tags')
    op.drop_table('task_tags')
    op.drop_table('task_access')
    op.drop_table('reminders')
    op.drop_table('activity_logs')
    op.drop_table('user_stats')
    op.drop_table('user_lists')
    op.drop_table('user_achievements')
    op.drop_table('tasks')
    op.drop_table('tags')
    op.drop_table('list_access')
    op.drop_table('users')
    op.drop_table('recurrence_rules')
    op.drop_table('lists')
    op.drop_table('achievements')
    # ### end Alembic commands ###
