import logging
from typing import Any

from aiogram.types import Message, CallbackQuery
from aiogram_dialog import DialogManager, ShowMode
from aiogram_dialog.widgets.input import MessageInput, ManagedTextInput
from aiogram_dialog.widgets.kbd import Button

from bot.dialogs.states import GetTaskDialogSG, StartSG
from database.models import LevelEnum
from locales.ru import PRIORITY_LABELS, URGENCY_LABELS

logger = logging.getLogger(__name__)


def split_title_and_description(text: str):
    cleaned = text.strip()
    if not cleaned:
        return "–ú–æ—è –∑–∞–¥–∞—á–∞", None
    lines = cleaned.split("\n", 1)
    title = lines[0].strip()
    description = lines[1].strip() if len(lines) > 1 else None
    return title, description


def make_default_task_data(message_id, task_text) -> dict[str, str | Any]:
    task_title, task_description = split_title_and_description(task_text)
    task_data = {
        "message_id": message_id,
        "task_title": task_title,
        "task_description": task_description,
        "list_title": "–í—Ö–æ–¥—è—â–∏–µ",
        "priority": LevelEnum.LOW,
        "priority_label": PRIORITY_LABELS[LevelEnum.LOW],
        "urgency": LevelEnum.LOW,
        "urgency_label": URGENCY_LABELS[LevelEnum.LOW],
    }
    return task_data


def empty_text_check(text: str) -> str:
    if text.strip():
        return text
    raise ValueError


async def correct_text_task_input(
        message: Message,
        _widget: ManagedTextInput,
        dialog_manager: DialogManager,
        _text: str,
):
    logger.debug("–ó–∞–ø—É—Å–∫ –¥–∏–∞–ª–æ–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏")
    task_data = make_default_task_data(message.message_id, message.html_text)
    await dialog_manager.start(
        state=GetTaskDialogSG.add_task_window,
        data=task_data,
        show_mode=ShowMode.DELETE_AND_SEND,
    )


async def empty_text_input(
        message: Message,
        _widget: ManagedTextInput,
        dialog_manager: DialogManager,
        _error: ValueError
):
    await message.answer("–¢—É—Ç –∂–µ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ ü§î")
    await dialog_manager.switch_to(
        state=StartSG.input_task_window,
        show_mode=ShowMode.DELETE_AND_SEND,
    )


async def wrong_text_task_input(
        message: Message,
        _widget: MessageInput,
        dialog_manager: DialogManager,
):
    logger.debug("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞—á–∏")
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –∏–º–µ–Ω–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!")
    await dialog_manager.switch_to(
        state=StartSG.input_task_window,
        show_mode=ShowMode.DELETE_AND_SEND,
    )


async def go_settings(
        callback: CallbackQuery,
        _widget: Button,
        _dialog_manager: DialogManager
):
    logger.debug(
        "–ó–∞–≥–ª—É—à–∫–∞-–ø–µ—Ä–µ—Ö–æ–¥ –≤ –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –§—É–Ω–∫—Ü–∏—è %s",
        go_settings.__name__
    )
    await callback.answer(
        "–ö–æ–≥–¥–∞-–Ω–∏–±—É–¥—å —Ç—É—Ç –±—É–¥–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"
    )


async def go_features(
        callback: CallbackQuery,
        _widget: Button,
        _dialog_manager: DialogManager
):
    logger.debug(
        "–ó–∞–≥–ª—É—à–∫–∞-–ø–µ—Ä–µ—Ö–æ–¥ –≤ –æ–∫–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –±–æ—Ç–∞. –§—É–Ω–∫—Ü–∏—è %s",
        go_features.__name__
    )
    await callback.answer(
        "–ö–æ–≥–¥–∞-–Ω–∏–±—É–¥—å —Ç—É—Ç –±—É–¥–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –∫ –æ–ø–∏—Å–∞–Ω–∏—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –±–æ—Ç–∞"
    )


async def go_support(
        callback: CallbackQuery,
        _widget: Button,
        _dialog_manager: DialogManager
):
    logger.debug(
        "–ó–∞–≥–ª—É—à–∫–∞-–ø–µ—Ä–µ—Ö–æ–¥ –≤ –æ–∫–Ω–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –§—É–Ω–∫—Ü–∏—è %s",
        go_support.__name__
    )
    await callback.answer(
        "–ö–æ–≥–¥–∞-–Ω–∏–±—É–¥—å —Ç—É—Ç –±—É–¥–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"
    )
