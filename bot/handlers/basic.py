import logging
from copy import deepcopy
from typing import Any

from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.types import (
    Message, InlineKeyboardMarkup, InlineKeyboardButton, User, CallbackQuery
)
from aiogram_dialog import Dialog, Window, DialogManager, StartMode
from aiogram_dialog.widgets.kbd import Row, Button
from aiogram_dialog.widgets.text import Const, Format

from bot.dialogs.states import GetTaskDialogSG, StartSG

logger = logging.getLogger(__name__)

router = Router()

fake_database = {}
template_data_for_new_user = {
    "lists": {
        "–†–∞–±–æ—Ç–∞": {},
        "–ë—ã—Ç": {},
    },
    "other": {},
}


def make_keyboard() -> InlineKeyboardMarkup:
    buttons = [
        [
            InlineKeyboardButton(
                text="–í —Å–ø–∏—Å–æ–∫",
                callback_data="to_list"
            ),
            InlineKeyboardButton(
                text="–í –Ω–µ—Ä–∞–∑–æ–±—Ä–∞–Ω–Ω–æ–µ",
                callback_data="to_unassembled"
            ),
        ],
        [
            InlineKeyboardButton(
                text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
                callback_data="edit"
            ),
            InlineKeyboardButton(
                text="–û—Ç–º–µ–Ω–∞",
                callback_data="cancel"
            )
        ],
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


@router.message(CommandStart())
async def cmd_start(
        message: Message,
        dialog_manager: DialogManager
):
    logger.debug("–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ø–∞–ª–æ –≤ —Ö—ç–Ω–¥–ª–µ—Ä %s", cmd_start.__name__)
    username = message.from_user.username
    first_name = message.from_user.first_name
    user_id = message.from_user.id
    if user_id not in fake_database:
        user_data: dict[str, Any] = deepcopy(template_data_for_new_user)
        user_data.update(username=username, first_name=first_name)
        fake_database[user_id] = user_data
        logger.debug(
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s (–∏–º—è: %s, id: %d) –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö",
            username, first_name, user_id
        )
    else:
        logger.debug(
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s (–∏–º—è: %s, id: %d) —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö",
            username, first_name, user_id
        )
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {username}!\n\n–Ø ‚Äî –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º "
        "—Å—Ç–∞–Ω–µ—Ç —Ç–≤–æ–∏–º —É–¥–æ–±–Ω—ã–º –∏ –Ω–∞–¥—ë–∂–Ω—ã–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º –¥–µ–ª, "
        "—É–º–Ω—ã–º –∫–∞—Ç–∞–ª–æ–≥–∏–∑–∞—Ç–æ—Ä–æ–º –≤—Å–µ—Ö —Ç–≤–æ–∏—Ö –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, "
        "—Ç–≤–æ–µ–π –≤—Ç–æ—Ä–æ–π –ø–∞–º—è—Ç—å—é –∏ –¥–∞–∂–µ ‚Äî —Ç–≤–æ–∏–º –≤—Ç–æ—Ä—ã–º –º–æ–∑–≥–æ–º!\n\n"
        "–ù–æ –ø–æ–∫–∞ —è –º–æ–≥—É —Å–ª–µ–¥—É—é—â–µ–µ:\n1. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–≤–æ—é –∑–∞–¥–∞—á—É."
    )
    await dialog_manager.start(state=StartSG.start_window,
                               mode=StartMode.RESET_STACK)


async def start_add_task(
        callback: CallbackQuery,
        widget: Button,
        dialog_manager: DialogManager
):
    logger.debug(
        "–ó–∞–ø—É—Å–∫ –¥–∏–∞–ª–æ–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏. –§—É–Ω–∫—Ü–∏—è %s",
        start_add_task.__name__
    )
    await dialog_manager.start(state=GetTaskDialogSG.create_task_window,
                               data={"task": "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É –Ω–∏–∂–µ"})


async def go_tasks(
        callback: CallbackQuery,
        widget: Button,
        dialog_manager: DialogManager
):
    logger.debug(
        "–ó–∞–≥–ª—É—à–∫–∞-–ø–µ—Ä–µ—Ö–æ–¥ –≤ –æ–∫–Ω–æ —Å –∑–∞–¥–∞—á–∞–º–∏. –§—É–Ω–∫—Ü–∏—è %s",
        go_tasks.__name__
    )
    await callback.answer(
        "–ö–æ–≥–¥–∞-–Ω–∏–±—É–¥—å —Ç—É—Ç –±—É–¥–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –∫ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º –∑–∞–¥–∞—á–∞–º"
    )


async def go_settings(
        callback: CallbackQuery,
        widget: Button,
        dialog_manager: DialogManager
):
    logger.debug(
        "–ó–∞–≥–ª—É—à–∫–∞-–ø–µ—Ä–µ—Ö–æ–¥ –≤ –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –§—É–Ω–∫—Ü–∏—è %s",
        go_settings.__name__
    )
    await callback.answer(
        "–ö–æ–≥–¥–∞-–Ω–∏–±—É–¥—å —Ç—É—Ç –±—É–¥–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"
    )


async def go_features(
        callback: CallbackQuery,
        widget: Button,
        dialog_manager: DialogManager
):
    logger.debug(
        "–ó–∞–≥–ª—É—à–∫–∞-–ø–µ—Ä–µ—Ö–æ–¥ –≤ –æ–∫–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –±–æ—Ç–∞. –§—É–Ω–∫—Ü–∏—è %s",
        go_features.__name__
    )
    await callback.answer(
        "–ö–æ–≥–¥–∞-–Ω–∏–±—É–¥—å —Ç—É—Ç –±—É–¥–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –∫ –æ–ø–∏—Å–∞–Ω–∏—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –±–æ—Ç–∞"
    )


async def go_support(
        callback: CallbackQuery,
        widget: Button,
        dialog_manager: DialogManager
):
    logger.debug(
        "–ó–∞–≥–ª—É—à–∫–∞-–ø–µ—Ä–µ—Ö–æ–¥ –≤ –æ–∫–Ω–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –§—É–Ω–∫—Ü–∏—è %s",
        go_support.__name__
    )
    await callback.answer(
        "–ö–æ–≥–¥–∞-–Ω–∏–±—É–¥—å —Ç—É—Ç –±—É–¥–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"
    )


async def go_inbox(
        callback: CallbackQuery,
        widget: Button,
        dialog_manager: DialogManager
):
    pass


async def go_cancel(
        callback: CallbackQuery,
        widget: Button,
        dialog_manager: DialogManager
):
    logger.debug(
        "–ü–µ—Ä–µ—Ö–æ–¥ –≤ –æ–∫–Ω–æ –æ—Ç–º–µ–Ω—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏. –§—É–Ω–∫—Ü–∏—è %s",
        go_cancel.__name__
    )
    await dialog_manager.switch_to(state=GetTaskDialogSG.cancel_window)


async def on_cancel_yes_click(
        callback: CallbackQuery,
        widget: Button,
        dialog_manager: DialogManager
):
    logger.debug(
        "–ó–∞–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏. –§—É–Ω–∫—Ü–∏—è %s",
        on_cancel_yes_click.__name__
    )
    await dialog_manager.done()


async def get_username(
        dialog_manager: DialogManager,
        event_from_user: User, **kwargs
):
    return {"username": event_from_user.first_name}


async def get_lists(
        dialog_manager: DialogManager,
        event_from_user: User, **kwargs
) -> dict[str, list[dict[str, int | Any]]]:
    logger.debug("–ê–ø–¥–µ–π—Ç –ø–æ–ø–∞–ª –≤ –≥–µ—Ç—Ç–µ—Ä %s", get_lists.__name__)
    if event_from_user.id not in fake_database:
        user_id = event_from_user.id
        username = event_from_user.username
        first_name = event_from_user.first_name
        user_data: dict[str, Any] = deepcopy(template_data_for_new_user)
        user_data.update(username=username, first_name=first_name)
        fake_database[user_id] = user_data
        logger.debug(
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s (–∏–º—è: %s, id: %d) –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö",
            username, first_name, user_id
        )
    user_lists = fake_database[event_from_user.id]["lists"].keys()
    user_lists_dict = [{"number": number, "title": user_list}
                       for number, user_list
                       in enumerate(user_lists, start=1)]
    user_lists = [(number, user_list)
                  for number, user_list
                  in enumerate(user_lists, start=1)]
    return {"user_lists_dict": user_lists_dict, "user_lists": user_lists}


async def get_task(dialog_manager: DialogManager, **kwargs):
    logger.debug("–ê–ø–¥–µ–π—Ç –ø–æ–ø–∞–ª –≤ –≥–µ—Ç—Ç–µ—Ä %s", get_task.__name__)
    return dialog_manager.start_data


start_dialog = Dialog(
    Window(
        Const("–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ø–ª–∞–Ω–∏—Ä—É–µ–º—É—é –∑–∞–¥–∞—á—É, "
              "—á—Ç–æ–±—ã –Ω–µ –∑–∞–±—ã—Ç—å –æ –Ω–µ–π! üîò ‚ö™ ‚¨ú üî≥ üî≤"),
        Row(
            Button(text=Const("–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"),
                   id="add_task",
                   on_click=start_add_task),
            Button(text=Const("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á–∏"),
                   id="tasks",
                   on_click=go_tasks),
        ),
        Row(
            Button(text=Const("–ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
                   id="settings",
                   on_click=go_settings),
            Button(text=Const("–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞"),
                   id="features",
                   on_click=go_features),
        ),
        Button(text=Const("–ü–æ–¥–¥–µ—Ä–∂–∫–∞"),
               id="support",
               on_click=go_support),
        state=StartSG.start_window
    ),
)

create_task_dialog = Dialog(
    Window(
        Format("{task}"),
        Row(
            Button(text=Const("–°–ø–∏—Å–∫–∏"),
                   id="lists",
                   on_click=go_tasks),
            Button(text=Const("–í—Ö–æ–¥—è—â–∏–µ"),
                   id="inbox",
                   on_click=go_inbox),
            Button(text=Const("–û—Ç–º–µ–Ω–∞"),
                   id="cancel",
                   on_click=go_cancel),
        ),
        getter=get_task,
        state=GetTaskDialogSG.create_task_window
    ),
)


@router.message(F.text)
async def get_task_handler(message: Message, dialog_manager: DialogManager):
    logger.debug("–ê–ø–¥–µ–π—Ç –ø–æ–ø–∞–ª –≤ —Ö—ç–Ω–¥–ª–µ—Ä %s", get_task_handler.__name__)
    await dialog_manager.start(state=GetTaskDialogSG.create_task_window,
                               data={"task": message.html_text})


@router.message()
async def other_msgs_process(message: Message):
    logger.debug("–ê–ø–¥–µ–π—Ç –ø–æ–ø–∞–ª –≤ —Ö—ç–Ω–¥–ª–µ—Ä %s", other_msgs_process.__name__)
    await message.reply("–ö–∞–∫–æ–µ-—Ç–æ –Ω–µ–æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–µ–Ω—è.")
